DICA: REFATORE O CÓDIGO depois do seu green... existe uma abordagem
chamada "shameless green"... basicamente é fazer funcionar e, depois, rever o código :)
  Enfim... refatore filho!


Convenção rails: todo método publico declarado no controller é considerado
uma action.

Boa prática de segurança: Dê white list ao invés de black list! Vá liberando
acesso de novas variáveis aos poucos... é muito melhor

Cuidado com o uso excessivo de gems... quanto maior o numero, mais suscetivel
a falhas de segurança... sempre pergunte-se se você precisa mesmo...

Ruby, por ser uma linguagem interpretada, demanda a utilização de testes
para que os erros sejam devidamente tratados... é muito necessário usar testes

- TEST PYRAMID
  Unidade ("pedaços")
  Serviço
  Interface ("completão")


- STRONG PARAMETERS - Especifica quais parâmetros que um form pode receber, assim
evitando problemas de segurança (alguém trocar o nome de algum campo por ex, ou criar um novo...)

- BANG( ! ) QUando usado no teste, inibi a continuação do mesmo (ou seja, caso não usado, se
houver algum crash o teste continua executando). Se utilizarmos um bang em um condicional, por 
exemplo, ele mataria o condicional (if @tralala.!save - o ELSE nunca executaria... save dando pau para tudo pikachu!!!)


Quem efetua VALIDAÇÂO das variáves? É basicamente teu model... ele abriga suas regras de negócios

DICA: Faça validação tanto no lado do cliente quanto no do server... se n der.. so no server

Caso a validação falhe, envie a pessoa para a pg anterior e exponha o erro...

Precisamos rodar o valid? para popular o array de erros... no caso o save
já chama ele, mas nos testes precisamos usá-lo...


- DIFERENÇAS ENTRE TESTES (UNITARIO, VISUALIZAÇÂO - OU INTERFACE, INTEGRAÇÂO)
	O capybara não está tanto pro primeiro
	Testes de unidade tbm são importantes! Eles são mais rápidos e menos onerosos...  

ACTIONS SAO INDEPENDENTES: TODA ACTION RODA SOZINHA! LEMBRE-SE DISSO...
  Trocou de action? A variável morreu amigo...
  Nisso vemos a importância do render... ele troca de view, mas não de action... precisamos
  dele para mostrar erros, por exemplo... (veja o codig abaixo, a render new na action create)




CODIGO COM COMENTARIOS (CONTROLLER):
  def new
    @manufacturer = Manufacturer.new
  end
  
  def create
    @manufacturer = Manufacturer.new(params.require(:manufacturer).permit(:name))
	    # poderíamos economizar uma linha utilizando ".create": ele faz o new e também o save ao mesmo tempo...
    if @manufacturer.save
      redirect_to @manufacturer
	#redirect_to manufacturer_path(id: @manufacturer.id) - versão longa
    else
      render :new  #redirect trocaria de action... trocando de action (seria new no caso) não aplicariamos save, e portanto
                   #não faríamos a validação do objeto @manufacturer (@valid? e o que eh aplicado por save)
        # redirect_to new_manufacturer_path
      # flash[:notice] = "Nome deve ser único"
	#flash serve, basicamente, para mandar uma msg do controller para a view... não vamos utilizar para validação...
    end
  end


VIEW /manufacturer/new:

<!--
<%= flash[:notice] %> caso quisesse mostrar uma msg flash... não é o ideal
     usaremos o metodo full_messages, que pega todos os erros e joga em um array
     O FLASH MANDA UMA MSG DO CONTROLLER PARA A VIEW 
-->
